# -*- coding: utf-8 -*-
"""SMART SDLC.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1O003mk0aMSoQD0ILuwGVOwYj5LdMEhQV
"""

!pip install transformers torch gradio PyPDF2 -q

import gradio as gr
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM
import PyPDF2
import io
import random

# Load model and tokenizer
model_name = "ibm-granite/granite-3.2-2b-instruct"
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForCausalLM.from_pretrained(
    model_name,
    torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32,
    device_map="auto" if torch.cuda.is_available() else None
)

if tokenizer.pad_token is None:
    tokenizer.pad_token = tokenizer.eos_token

def generate_response(prompt, max_length=1024):
    inputs = tokenizer(prompt, return_tensors="pt", truncation=True, max_length=512)

    if torch.cuda.is_available():
        inputs = {k: v.to(model.device) for k, v in inputs.items()}

    with torch.no_grad():
        outputs = model.generate(
            **inputs,
            max_length=max_length,
            temperature=0.7,
            do_sample=True,
            pad_token_id=tokenizer.eos_token_id
        )

    response = tokenizer.decode(outputs[0], skip_special_tokens=True)
    response = response.replace(prompt, "").strip()
    return response

def extract_text_from_pdf(pdf_file):
    if pdf_file is None:
        return ""

    try:
        pdf_reader = PyPDF2.PdfReader(pdf_file)
        text = ""
        for page in pdf_reader.pages:
            text += page.extract_text() + "\n"
        return text
    except Exception as e:
        return f"Error reading PDF: {str(e)}"

def requirement_analysis(pdf_file, prompt_text):
    # Get text from PDF or prompt
    if pdf_file is not None:
        content = extract_text_from_pdf(pdf_file)
        analysis_prompt = f"Analyze the following document and extract key software requirements. Organize them into functional requirements, non-functional requirements, and technical specifications:\n\n{content}"
    else:
        analysis_prompt = f"Analyze the following requirements and organize them into functional requirements, non-functional requirements, and technical specifications:\n\n{prompt_text}"

    return generate_response(analysis_prompt, max_length=1200)

def code_generation(prompt, language):
    code_prompt = f"Generate {language} code for the following requirement:\n\n{prompt}\n\nCode:"
    return generate_response(code_prompt, max_length=1200)

# Custom CSS with expanded color palette
css = """
/* Initial styling */
body, .gradio-container {
    background: linear-gradient(135deg, #1a1a2e 0%, #16213e 100%);
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    color: #e6e6e6;
    animation: backgroundChange 42s infinite, fontChange 42s infinite;
}

/* Animation for background change - expanded color palette */
@keyframes backgroundChange {
    0% { background: linear-gradient(135deg, #1a1a2e 0%, #16213e 100%); }
    7% { background: linear-gradient(135deg, #1e5128 0%, #191a19 100%); }
    14% { background: linear-gradient(135deg, #522546 0%, #371b58 100%); }
    21% { background: linear-gradient(135deg, #3d0000 0%, #950101 100%); }
    28% { background: linear-gradient(135deg, #0d7377 0%, #323232 100%); }
    35% { background: linear-gradient(135deg, #2c3e50 0%, #4ca1af 100%); }
    42% { background: linear-gradient(135deg, #834d9b 0%, #d04ed6 100%); }
    49% { background: linear-gradient(135deg, #009FFF 0%, #ec2F4B 100%); }
    56% { background: linear-gradient(135deg, #654ea3 0%, #eaafc8 100%); }
    63% { background: linear-gradient(135deg, #FF416C 0%, #FF4B2B 100%); }
    70% { background: linear-gradient(135deg, #7F00FF 0%, #E100FF 100%); }
    77% { background: linear-gradient(135deg, #3f2b96 0%, #a8c0ff 100%); }
    84% { background: linear-gradient(135deg, #c2e59c 0%, #64b3f4 100%); }
    91% { background: linear-gradient(135deg, #ff9966 0%, #ff5e62 100%); }
    100% { background: linear-gradient(135deg, #1a1a2e 0%, #16213e 100%); }
}

/* Animation for font change */
@keyframes fontChange {
    0% { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; }
    14% { font-family: 'Courier New', Courier, monospace; }
    28% { font-family: Georgia, serif; }
    42% { font-family: 'Trebuchet MS', sans-serif; }
    56% { font-family: 'Arial', sans-serif; }
    70% { font-family: 'Verdana', sans-serif; }
    84% { font-family: 'Gill Sans', sans-serif; }
    100% { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; }
}

/* Headings and Markdown */
h1 {
    color: #ffffff;
    text-align: center;
    font-weight: 600;
    margin-bottom: 20px;
    text-shadow: 0 0 10px rgba(255, 255, 255, 0.5);
    animation: colorChange 7s infinite, float 7s infinite;
}

@keyframes colorChange {
    0% { color: #ffffff; }
    14% { color: #3498db; }
    28% { color: #9b59b6; }
    42% { color: #e74c3c; }
    56% { color: #2ecc71; }
    70% { color: #f1c40f; }
    84% { color: #e67e22; }
    100% { color: #ffffff; }
}

/* Tabs */
.tab-nav {
    border-bottom: 2px solid #3498db;
    animation: borderColorChange 7s infinite;
}

@keyframes borderColorChange {
    0% { border-bottom-color: #3498db; }
    14% { border-bottom-color: #2ecc71; }
    28% { border-bottom-color: #9b59b6; }
    42% { border-bottom-color: #e74c3c; }
    56% { border-bottom-color: #f1c40f; }
    70% { border-bottom-color: #e67e22; }
    84% { border-bottom-color: #1abc9c; }
    100% { border-bottom-color: #3498db; }
}

.tab-nav button {
    font-weight: bold;
    color: #b8b8b8;
    transition: color 0.3s;
    background: rgba(30, 30, 30, 0.7) !important;
    animation: tabButtonColorChange 7s infinite;
}

@keyframes tabButtonColorChange {
    0% { background: rgba(30, 30, 30, 0.7) !important; }
    14% { background: rgba(46, 204, 113, 0.2) !important; }
    28% { background: rgba(155, 89, 182, 0.2) !important; }
    42% { background: rgba(231, 76, 60, 0.2) !important; }
    56% { background: rgba(241, 196, 15, 0.2) !important; }
    70% { background: rgba(230, 126, 34, 0.2) !important; }
    84% { background: rgba(26, 188, 156, 0.2) !important; }
    100% { background: rgba(30, 30, 30, 0.7) !important; }
}

.tab-nav button:hover {
    color: #ffffff;
    background: rgba(50, 50, 50, 0.9) !important;
}

.tab-nav button.selected {
    color: #ffffff;
    animation: selectedTabColorChange 7s infinite;
}

@keyframes selectedTabColorChange {
    0% { background: rgba(52, 152, 219, 0.3) !important; }
    14% { background: rgba(46, 204, 113, 0.3) !important; }
    28% { background: rgba(155, 89, 182, 0.3) !important; }
    42% { background: rgba(231, 76, 60, 0.3) !important; }
    56% { background: rgba(241, 196, 15, 0.3) !important; }
    70% { background: rgba(230, 126, 34, 0.3) !important; }
    84% { background: rgba(26, 188, 156, 0.3) !important; }
    100% { background: rgba(52, 152, 219, 0.3) !important; }
}

/* Buttons */
.gr-button {
    color: white;
    border: none;
    border-radius: 8px;
    padding: 12px 24px;
    font-size: 16px;
    font-weight: bold;
    cursor: pointer;
    transition: all 0.3s ease;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.3);
    animation: buttonColorChange 7s infinite, pulse 7s infinite;
}

@keyframes buttonColorChange {
    0% { background: linear-gradient(145deg, #3498db, #2980b9); }
    14% { background: linear-gradient(145deg, #2ecc71, #27ae60); }
    28% { background: linear-gradient(145deg, #9b59b6, #8e44ad); }
    42% { background: linear-gradient(145deg, #e74c3c, #c0392b); }
    56% { background: linear-gradient(145deg, #f1c40f, #f39c12); }
    70% { background: linear-gradient(145deg, #e67e22, #d35400); }
    84% { background: linear-gradient(145deg, #1abc9c, #16a085); }
    100% { background: linear-gradient(145deg, #3498db, #2980b9); }
}

.gr-button:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 10px rgba(0, 0, 0, 0.4);
}

.gr-button:active {
    transform: translateY(1px);
}

/* Inputs and Textboxes */
.gr-box, .gr-textbox, .gr-file, .gr-dropdown {
    background: rgba(30, 30, 30, 0.7);
    border: 1px solid #444;
    border-radius: 8px;
    padding: 10px;
    box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.3);
    transition: box-shadow 0.3s;
    color: #e6e6e6;
    animation: inputBorderChange 7s infinite;
}

@keyframes inputBorderChange {
    0% { border-color: #444; }
    14% { border-color: #2ecc71; }
    28% { border-color: #9b59b6; }
    42% { border-color: #e74c3c; }
    56% { border-color: #f1c40f; }
    70% { border-color: #e67e22; }
    84% { border-color: #1abc9c; }
    100% { border-color: #444; }
}

.gr-box:focus-within, .gr-textbox:focus, .gr-file:focus, .gr-dropdown:focus {
    box-shadow: 0 0 8px rgba(52, 152, 219, 0.7);
    border-color: #3498db;
}

/* Labels */
.gr-label {
    color: #cccccc !important;
    font-weight: bold;
    animation: labelColorChange 7s infinite;
}

@keyframes labelColorChange {
    0% { color: #cccccc !important; }
    14% { color: #2ecc71 !important; }
    28% { color: #9b59b6 !important; }
    42% { color: #e74c3c !important; }
    56% { color: #f1c40f !important; }
    70% { color: #e67e22 !important; }
    84% { color: #1abc9c !important; }
    100% { color: #cccccc !important; }
}

/* Output textboxes */
.gr-textbox {
    background: rgba(20, 20, 20, 0.8);
}

/* General Layout */
.gradio-container {
    padding: 20px;
}

/* Custom scrollbar */
::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: rgba(50, 50, 50, 0.3);
}

::-webkit-scrollbar-thumb {
    background: #3498db;
    border-radius: 4px;
    animation: scrollbarColorChange 7s infinite;
}

@keyframes scrollbarColorChange {
    0% { background: #3498db; }
    14% { background: #2ecc71; }
    28% { background: #9b59b6; }
    42% { background: #e74c3c; }
    56% { background: #f1c40f; }
    70% { background: #e67e22; }
    84% { background: #1abc9c; }
    100% { background: #3498db; }
}

::-webkit-scrollbar-thumb:hover {
    background: #2980b9;
}

/* Pulse animation for elements */
@keyframes pulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.02); }
    100% { transform: scale(1); }
}

/* Floating animation */
@keyframes float {
    0% { transform: translateY(0px); }
    50% { transform: translateY(-5px); }
    100% { transform: translateY(0px); }
}

/* Additional animations for visual interest */
@keyframes glow {
    0% { box-shadow: 0 0 5px rgba(52, 152, 219, 0.5); }
    50% { box-shadow: 0 0 20px rgba(52, 152, 219, 0.8); }
    100% { box-shadow: 0 0 5px rgba(52, 152, 219, 0.5); }
}

.gr-button {
    animation: buttonColorChange 7s infinite, pulse 7s infinite, glow 3s infinite;
}

/* Rainbow text effect for headings */
@keyframes rainbow {
    0% { color: #ff0000; }
    14% { color: #ff7f00; }
    28% { color: #ffff00; }
    42% { color: #00ff00; }
    56% { color: #0000ff; }
    70% { color: #4b0082; }
    84% { color: #9400d3; }
    100% { color: #ff0000; }
}

h1 {
    animation: float 7s infinite, rainbow 14s infinite;
}

/* Special effect for file upload area */
.gr-file {
    animation: inputBorderChange 7s infinite, pulse 7s infinite;
}

/* Special effect for dropdown */
.gr-dropdown {
    animation: inputBorderChange 7s infinite;
}
"""

# Create Gradio interface with custom CSS
with gr.Blocks(css=css, theme=gr.themes.Default(primary_hue="blue")) as app:
    gr.Markdown("# 🤖 SmartSDLC – AI-Enhanced Software Development Lifecycle")

    with gr.Tabs():
        with gr.TabItem("Code Analysis"):
            with gr.Row():
                with gr.Column():
                    pdf_upload = gr.File(label="Upload PDF", file_types=[".pdf"])
                    prompt_input = gr.Textbox(
                        label="Or write requirements here",
                        placeholder="Describe your software requirements...",
                        lines=5
                    )
                    analyze_btn = gr.Button("Analyze", variant="primary")

                with gr.Column():
                    analysis_output = gr.Textbox(label="Requirements Analysis", lines=20)

            analyze_btn.click(requirement_analysis, inputs=[pdf_upload, prompt_input], outputs=analysis_output)

        with gr.TabItem("Code Generate"):
            with gr.Row():
                with gr.Column():
                    code_prompt = gr.Textbox(
                        label="Code Requirements",
                        placeholder="Describe what code you want to generate...",
                        lines=5
                    )
                    language_dropdown = gr.Dropdown(
                        choices=["Python", "JavaScript", "Java", "C++", "C#", "PHP", "Go", "Rust"],
                        label="Programming Language",
                        value="Python"
                    )
                    generate_btn = gr.Button("Generate Code", variant="primary")

                with gr.Column():
                    code_output = gr.Textbox(label="Generated Code", lines=20)

            generate_btn.click(code_generation, inputs=[code_prompt, language_dropdown], outputs=code_output)

app.launch(share=True)